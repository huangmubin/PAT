# 1001 采花生

> 时间限制 1000 ms 内存限制 16384 KB 代码长度限制 100 KB 判断程序 Standard (来自 小小)

> 目描述

鲁宾逊先生有一只宠物猴，名叫多多。这天，他们两个正沿着乡间小路散步，突然发现路边的告示牌上贴着一张小小的纸条：“欢迎免费品尝我种的花生！——熊字”。
鲁宾逊先生和多多都很开心，因为花生正是他们的最爱。在告示牌背后，路边真的有一块花生田，花生植株整齐地排列成矩形网格。有经验的多多一眼就能看出，每棵花生植株下的花生有多少。为了训练多多的算术，鲁宾逊先生说:“你先找出花生最多的植株，去采摘它的花生;然后再找出剩下的植株里花生最多的，去采摘它的花生;依此类推，不过你一定要在我限定的时间内回到路边。”

我们假定多多在每个单位时间内,可以做下列四件事情中的一件：

1. 从路边跳到最靠近路边（即第一行）的某棵花生植株；
2. 从一棵植株跳到前后左右与之相邻的另一棵植株；
3. 采摘一棵植株下的花生；
4. 从最靠近路边（即第一行）的某棵花生植株跳回路边。

现在给定一块花生田的大小和花生的分布，请问在限定时间内，多多最多可以采到多少个花生？

注意可能只有部分植株下面长有花生，假设这些植株下的花生个数各不相同。例如花生田里只有位于(2, 5), (3, 7), (4, 2), (5, 4)的植株下长有花生，个数分别为 13, 7, 15, 9。多多在 21 个单位时间内，只能经过(4, 2)、(2, 5)、(5, 4)，最多可以采到 37 个花生。

> 输入描述:

输入包含多组数据，每组数据第一行包括三个整数 M（1≤M≤20）、N（1≤N≤20）和 K（0≤K≤1000），用空格隔开；表示花生田的大小为 M * N，多多采花生的限定时间为 K个单位时间。

紧接着 M 行，每行包括 N 个自然数 P（0≤P≤500），用空格隔开；表示花生田里植株下花生的数目，并且除了0（没有花生），其他所有植株下花生的数目都不相同。


> 输出描述:

对应每一组数据，输出一个整数，即在限定时间内，多多最多可以采到花生的个数。

> 输入例子:

6 7 21
0 0 0 0 0 0 0
0 0 0 0 13 0 0
0 0 0 0 0 0 7
0 15 0 0 0 0 0
0 0 0 9 0 0 0
0 0 0 0 0 0 0
6 7 15
0 0 0 0 0 0 0
0 0 0 0 13 0 0
0 0 0 0 0 0 7
0 20 0 0 0 0 0
0 0 0 9 0 0 0
0 0 0 0 0 0 0
1 1 0
0
1 1 3
123
0 0 0
1
EOF

> 输出例子:

37

## C++

```
#include <iostream>
#include <algorithm>

using namespace std;

struct PeanutTree {
    int row = 0, col = 0;
    int value = 0;
    int in_path = 0, out_path = 0;
};

bool cmp(PeanutTree a, PeanutTree b) {
    return a.value > b.value;
}

int main(int argc, const char * argv[]) {
    int m = 0, n = 0, k = 0, value = 0;
    int tree_count = 0, peanuts = 0;
    PeanutTree trees[10];
    while (cin >> m >> n >> k) {
        // input datas
        tree_count = peanuts = 0;
        for (int row = 0; row < m; row++) {
            for (int col = 0; col < n; col++) {
                cin >> value;
                if (value != 0) {
                    trees[tree_count].row = row;
                    trees[tree_count].col = col;
                    trees[tree_count].value = value;
                    trees[tree_count].out_path = row + 1;
                    tree_count++;
                }
            }
        }
        
        if (tree_count > 0) {
            // sort
            sort(trees, trees + tree_count, cmp);
            
            // count
            trees[0].in_path = trees[0].row + 1;
            if (k > trees[0].in_path + trees[0].out_path) {
                peanuts += trees[0].value;
                k = k - trees[0].in_path - 1;
                for (int i = 1; i < tree_count; i++) {
                    trees[i].in_path = abs(trees[i-1].row - trees[i].row) + abs(trees[i-1].col - trees[i].col);
                    if (k > trees[i].in_path + trees[i].out_path) {
                        peanuts += trees[i].value;
                        k = k - trees[i].in_path - 1;
                    } else {
                        break;
                    }
                }
            }
        }
        
        // output
        cout << peanuts << endl;
    }
    return 0;
}
```

# 1002 NowCoder数列

> 时间限制 3000 ms 内存限制 32768 KB 代码长度限制 100 KB 判断程序 Standard (来自 小小)

> 题目描述

NowCoder最近在研究一个数列：

* F(0) = 7
* F(1) = 11
* F(n) = F(n-1) + F(n-2) (n≥2)

他称之为NowCoder数列。请你帮忙确认一下数列中第n个数是否是3的倍数。

> 输入描述:

输入包含多组数据。
每组数据包含一个整数n，(0≤n≤1000000)。

> 输出描述:

对应每一组输入有一行输出。
如果F(n)是3的倍数，则输出“Yes”；否则输出“No”。

> 输入例子:

0
1
2
3
4
5

> 输出例子:

No
No
Yes
No
No
No

## C++

```
#include <iostream>

using namespace std;

int main(int argc, const char * argv[]) {
    int value = 0;
    while (cin >> value) {
        if (value % 4 == 2) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
        }
    }
    return 0;
}
```

# 1003 养兔子

> 时间限制 1000 ms 内存限制 32768 KB 代码长度限制 100 KB 判断程序 Standard (来自 小小)

> 题目描述

一只成熟的兔子每天能产下一胎兔子。每只小兔子的成熟期是一天。 某人领养了一只小兔子，请问第N天以后，他将会得到多少只兔子。

> 输入描述:

测试数据包括多组，每组一行，为整数n(1≤n≤90)。

> 输出描述:

对应输出第n天有几只兔子(假设没有兔子死亡现象)。

> 输入例子:

1
2

> 输出例子:

1
2

## C++

```
#include <iostream>

using namespace std;

long rabbits_count(long *rabbits, int n) {
    if (rabbits[n] > 0) {
        return rabbits[n];
    } else {
        rabbits[n] = rabbits_count(rabbits, n - 1) + rabbits_count(rabbits, n - 2);
        return rabbits[n];
    }
}

int main(int argc, const char * argv[]) {
    int value = 0;
    long rabbits[91] = {0,1,2};
    
    while (cin >> value) {
        cout << rabbits_count(rabbits, value) << endl;
    }
    return 0;
}
```

# 1004 客似云来

> 时间限制 1000 ms 内存限制 32768 KB 代码长度限制 100 KB 判断程序 Standard (来自 小小)

> 题目描述

NowCoder开了一家早餐店，这家店的客人都有个奇怪的癖好：他们只要来这家店吃过一次早餐，就会每天都过来；并且，所有人在这家店吃了两天早餐后，接下来每天都会带一位新朋友一起来品尝。

于是，这家店的客人从最初一个人发展成浩浩荡荡成百上千人：1、1、2、3、5……

现在，NowCoder想请你帮忙统计一下，某一段时间范围那他总共卖出多少份早餐（假设每位客人只吃一份早餐）。

> 输入描述:

测试数据包括多组。

每组数据包含两个整数from和to(1≤from≤to≤80)，分别代表开店的第from天和第to天。

> 输出描述:

对应每一组输入，输出从from到to这些天里（包含from和to两天），需要做多少份早餐。

> 输入例子:

1 10
2 8
36 80

## C++

```
#include <iostream>

using namespace std;

long people_count(long *peoples, int n) {
    if (peoples[n] > 0) {
        return peoples[n];
    } else {
        peoples[n] = people_count(peoples, n - 1) + people_count(peoples, n - 2);
        return peoples[n];
    }
}

int main(int argc, const char * argv[]) {
    int from = 0, to = 0;
    long peoples[81] = {1,1,2,3,5};
    long sum = 0;
    
    while (cin >> from >> to) {
        sum = 0;
        for (int i = from - 1; i < to; i++) {
            sum = sum + people_count(peoples, i);
        }
        cout << sum << endl;
    }
    return 0;
}
```

# 1005 斐波那契凤尾

> 时间限制 3000 ms 内存限制 32768 KB 代码长度限制 100 KB 判断程序 Standard (来自 小小)

> 题目描述

NowCoder号称自己已经记住了1-100000之间所有的斐波那契数。

为了考验他，我们随便出一个数n，让他说出第n个斐波那契数。当然，斐波那契数会很大。因此，如果第n个斐波那契数不到6位，则说出该数；否则只说出最后6位。

> 输入描述:

输入有多组数据。

每组数据一行，包含一个整数n (1≤n≤100000)。

> 输出描述:

对应每一组输入，输出第n个斐波那契数的最后6位。

> 输入例子:

1
2
3
4
100000

> 输出例子:

1
2
3
5
537501

## C++

```
#include <iostream>

using namespace std;

int main(int argc, const char * argv[]) {
    int Fibonacci_suffix[100001] = {1,1,2,3,5};
    for (int i = 5; i < 100001; i++) {
        Fibonacci_suffix[i] = (Fibonacci_suffix[i-1] + Fibonacci_suffix[i-2]) % 1000000;
    }
    
    int n = 0;
    while (cin >> n) {
        if (n < 29) {
            printf("%d\n", Fibonacci_suffix[n]);
        } else {
            printf("%06d\n", Fibonacci_suffix[n]);
        }
    }
    return 0;
}
```

# 1006 星际密码

时间限制 1000 ms 内存限制 32768 KB 代码长度限制 100 KB 判断程序 Standard (来自 小小)
题目描述
星际战争开展了100年之后，NowCoder终于破译了外星人的密码！他们的密码是一串整数，通过一张表里的信息映射成最终4位密码。表的规则是：n对应的值是矩阵X的n次方的左上角，如果这个数不足4位则用0填充，如果大于4位的则只输出最后4位。

|1 1|^n => |Xn ..|

|1 0|      |.. ..|

例如n=2时，

|1 1|^2 => |1 1| * |1 1| => |2 1|

|1 0|      |1 0|   |1 0|    |1 1|

即2对应的数是“0002”。

输入描述:
输入有多组数据。

每组数据两行：第一行包含一个整数n (1≤n≤100)；第二行包含n个正整数Xi (1≤Xi≤10000)


输出描述:
对应每一组输入，输出一行相应的密码。

输入例子:
6
18 15 21 13 25 27
5
1 10 100 1000 10000

输出例子:
418109877711037713937811
00010089410135017501

```
#include <iostream>
 
using namespace std;
 
int main(int argc, const char * argv[]) {
    int Fibonacci_suffix[100001] = {1,1,2,3,5};
    for (int i = 5; i < 100001; i++) {
        Fibonacci_suffix[i] = (Fibonacci_suffix[i-1] + Fibonacci_suffix[i-2]) % 10000;
    }
     
    int n = 0, v = 0;
    while (cin >> n) {
        for (int i = 0; i < n; i++) {
            cin >> v;
            printf("%04d", Fibonacci_suffix[v]);
        }
        printf("\n");
    }
    return 0;
}
```

# 1007 母牛的故事

时间限制 1000 ms 内存限制 32768 KB 代码长度限制 100 KB 判断程序 Standard (来自 小小)
题目描述
有一头母牛，它每年年初生一头小母牛。每头小母牛从第四个年头开始，每年年初也生一头小母牛。请编程实现在第n年的时候，共有多少头母牛？

输入描述:
输入数据由多个测试实例组成，每个测试实例占一行，包括一个整数n(0<n<55)，n的含义如题目中描述。


输出描述:
对于每个测试实例，输出在第n年的时候母牛的数量。

每个输出占一行。

输入例子:
2
4
5

输出例子:
2
4
6

```
#include <iostream>
 
using namespace std;
 
int main(int argc, const char * argv[]) {
    int cows[55] = {1,2,3,4,6};
    for (int i = 5; i < 55; i++) {
        cows[i] = cows[i-1] + cows[i-3];
    }
 
    int n = 0;
    while (cin >> n) {
        printf("%d\n", cows[n-1]);
    }
    return 0;
}
```

# 1008 童年生活二三事

时间限制 1000 ms 内存限制 32768 KB 代码长度限制 100 KB 判断程序 Standard (来自 小小)
题目描述
NowCoder小时候走路喜欢蹦蹦跳跳，他最喜欢在楼梯上跳来跳去。
但年幼的他一次只能走上一阶或者一下子蹦上两阶。
现在一共有N阶台阶，请你计算一下NowCoder从第0阶到第N阶共有几种走法。

输入描述:
输入包括多组数据。每组数据包括一个整数n, (1≤n≤90)。


输出描述:
对应每个输入包括一个输出。
为redraiment到达第n阶不同走法的数量。

输入例子:
1
2

输出例子:
1
2

```
#include <iostream>

using namespace std;

int main(int argc, const char * argv[]) {
    long runs[90] = {1,2,3,5,8};
    for (int i = 5; i < 90; i++) {
        runs[i] = runs[i-1] + runs[i-2];
    }
    
    int n = 0;
    while (cin >> n) {
        printf("%lld\n", runs[n-1]);
    }
    return 0;
}
```

# 1009 蜜蜂寻路

时间限制 1000 ms 内存限制 32768 KB 代码长度限制 100 KB 判断程序 Standard (来自 小小)
题目描述
nowcoder利用业余时间养了一窝蜜蜂，因为空间比较小，蜂房只有两排，如下图所示：



如你所见，蜜蜂的蜂房是正六边形，假设蜜蜂只会从左往右爬，即从1号蜂房能爬到2号和3号；从6号蜂房能爬到7号和8号……

现给出两个蜂房的编号a和b，要求计算蜂房a的蜜蜂爬到蜂房b有几条不同路线。

输入描述:
1. 输入的第一行是一个整数n
2. 接下来n行数据，每行一组测试用例
3. 每组测试用例包含两个正整数a和b，(0 < a < b < 2^31)


输出描述:
每组用例的结果单独输出一行。输出数据结果范围是 [0, 2^63)。

输入例子:
3
1 2
3 6
99 100

输出例子:
1
3
1

```
#include <iostream>

using namespace std;

int main(int argc, const char * argv[]) {
    long long runs[92] = {0,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,832040,1346269,2178309,3524578,5702887,9227465,14930352,24157817,39088169,63245986,102334155,165580141,267914296,433494437,701408733,1134903170,1836311903,2971215073,4807526976,7778742049,12586269025,20365011074,32951280099,53316291173,86267571272,139583862445,225851433717,365435296162,591286729879,956722026041,1548008755920,2504730781961,4052739537881,6557470319842,10610209857723,17167680177565,27777890035288,44945570212853,72723460248141,117669030460994,190392490709135,308061521170129,498454011879264,806515533049393,1304969544928657,2111485077978050,3416454622906707,5527939700884757,8944394323791464,14472334024676221,23416728348467685,37889062373143906,61305790721611591,99194853094755497,160500643816367088,259695496911122585,420196140727489673,679891637638612258,1100087778366101931,1779979416004714189,2880067194370816120,4660046610375530309,7540113804746346429,};
//    for (int i = 3; i < 1000000; i++) {
//        runs[i] = runs[i-1] + runs[i-2];
//    }
    
    int n = 0, a = 0, b = 0;
    cin >> n;
    for (int i = 0; i < n; i++) {
        cin >> a >> b;
        printf("%lld\n", runs[b-a]);
    }
    return 0;
}
```

# 1010 骨牌铺方格

时间限制 1000 ms 内存限制 32768 KB 代码长度限制 100 KB 判断程序 Standard (来自 小小)
题目描述
在2×n的一个长方形方格中,用一个1× 2的骨牌铺满方格,输入n ,输出铺放方案的总数.

例如n=3时,为2× 3方格，骨牌的铺放方案有三种,如下图：



输入描述:
输入数据由多行组成，每行包含一个整数n，表示该测试实例的长方形方格的规格是2×n (1≤n≤90)。


输出描述:
对于每个测试实例，请输出铺放方案的总数，每个实例的输出占一行。

输入例子:
1
3
2

输出例子:
1
3
2

```
#include <iostream>

using namespace std;

int main(int argc, const char * argv[]) {
    long long fibonacci[92] = {0,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,832040,1346269,2178309,3524578,5702887,9227465,14930352,24157817,39088169,63245986,102334155,165580141,267914296,433494437,701408733,1134903170,1836311903,2971215073,4807526976,7778742049,12586269025,20365011074,32951280099,53316291173,86267571272,139583862445,225851433717,365435296162,591286729879,956722026041,1548008755920,2504730781961,4052739537881,6557470319842,10610209857723,17167680177565,27777890035288,44945570212853,72723460248141,117669030460994,190392490709135,308061521170129,498454011879264,806515533049393,1304969544928657,2111485077978050,3416454622906707,5527939700884757,8944394323791464,14472334024676221,23416728348467685,37889062373143906,61305790721611591,99194853094755497,160500643816367088,259695496911122585,420196140727489673,679891637638612258,1100087778366101931,1779979416004714189,2880067194370816120,4660046610375530309,7540113804746346429,};
    
    int n = 0;
    while (cin >> n) {
        printf("%lld\n", fibonacci[n]);
    }
    return 0;
}
```

# 1011 NowCoder小定律

时间限制 1000 ms 内存限制 32768 KB 代码长度限制 100 KB 判断程序 Standard (来自 小小)
题目描述
对于表达式n^2+n+41，当n在（x,y）范围内取整数值时（包括x,y）(-39<=x<50),判定该表达式的值是否为素数

输入描述:
输入数据有多组，每组占一行，由两个整数x，y组成，当x=0,y=0时，表示输入结束，该行不做处理。


输出描述:
对于每个给定范围内的取值，如果表达式的值都为素数，则输出"OK",否则请输出“Sorry”,每组输出占一行。

输入例子:
0 1
0 0

输出例子:
OK

```
#include <iostream>

using namespace std;

bool is_prime(int v) {
    if (v < 2) {
        return false;
    }
    int i = 2;
    while (i * i <= v) {
        if (v % i == 0) {
            return false;
        }
        i += 1;
    }
    return true;
}

int main(int argc, const char * argv[]) {
    int x, y;
    while (cin >> x >> y) {
        if (x == 0 && y == 0) { break; }
        
        bool result = true;
        for (int v = x; v <= y; v++) {
            if (!is_prime(v * v + v + 41)) {
                result = false; break;
            }
        }
        
        if (result) {
            printf("OK\n");
        } else {
            printf("Sorry\n");
        }
    }
    return 0;
}
```

# 1012 分数运算

时间限制 1000 ms 内存限制 32768 KB 代码长度限制 100 KB 判断程序 Standard (来自 小小)
题目描述
计算机中采用浮点数表示所有实数，但这意味着精度丢失。例如无法精确表示“1/3”。

NowCoder最近要处理很多金融问题，这些账目不允许出现精度丢失，因为差之毫厘谬之千里。你能帮他实现一套分数的计算器吗？

输入描述:
输入包含多组数据。

每组数据一行，包含两个分数和一个运算符，中间用空格隔开。

其中分子与分母均为不大于30的正整数。


输出描述:
对应每一组数据，输出两个分数的计算结果。

要求输出最简分数，即分子与分母互质。

输入例子:
1/3 2/3 +
1/5 1/4 -
1/2 1/3 *
2/3 4/3 /

输出例子:
1/1
-1/20
1/6
1/2

```
#include <iostream>

using namespace std;

// 求公约数
int common_divisor(int a, int b) {
    int r = 0;
    do {
        r = a % b;
        a = b;
        b = r;
    } while (r != 0);
    return a;
}

int main(int argc, const char * argv[]) {
    int m1, m2, d1, d2;
    char type;
    int m = 0, d = 0, c;
    while (cin >> m1 >> type >> d1 >> m2 >> type >> d2 >> type) {
        switch (type) {
            case '+':
                m = m1 * d2 + m2 * d1;
                d = d1 * d2;
                break;
            case '-':
                m = m1 * d2 - m2 * d1;
                d = d1 * d2;
                break;
            case '*':
                m = m1 * m2;
                d = d1 * d2;
                break;
            case '/':
                m = m1 * d2;
                d = d1 * m2;
            default: break;
        }
        c = common_divisor(m, d);
        c = c == 0 ? 1 : abs(c);
        printf("%d/%d\n", m / c, d / c);
    }
    return 0;
}
```

# 1013 分解因数

时间限制 1000 ms 内存限制 32768 KB 代码长度限制 100 KB 判断程序 Standard (来自 小小)
题目描述
所谓因子分解，就是把给定的正整数a，分解成若干个素数的乘积，即 a = a1 × a2 × a3 × ... × an,并且 1 < a1 ≤ a2 ≤ a3 ≤ ... ≤ an。其中a1、a2、...、an均为素数。

先给出一个整数a，请输出分解后的因子。

输入描述:
输入包含多组数据，每组数据包含一个正整数a（2≤a≤1000000）。


输出描述:
对应每组数据，以“a = a1 * a2 * a3...”的形式输出因式分解后的结果。

输入例子:
10
18

输出例子:
10 = 2 * 5
18 = 2 * 3 * 3

```
#include <iostream>

using namespace std;

// 求素数
bool is_prime(int v) {
    if (v < 2) {
        return false;
    } else {
        int i = 2;
        while (i * i <= v) {
            if (v % i++ == 0) {
                return false;
            }
        }
        return true;
    }
}

int prime_value(int primes[], int idx, int *flag) {
    while (*flag < idx) {
        int value = primes[*flag];
        while (!is_prime(++value));
        *flag += 1;
        primes[*flag] = value;
    }
    return primes[idx];
}

int main(int argc, const char * argv[]) {
    int value = 0;
    int primes[100000] = {2,3,5,7,11,13,17,19,23,29}, prime, flag = 9, idx = 0;
    while (cin >> value) {
        prime = 2; idx = 0;
        if (is_prime(value)) {
            printf("%d = %d", value, value);
            value /= value;
        } else {
            while (value % prime != 0) {
                prime = prime_value(primes, ++idx, &flag);
            }
            printf("%d = %d", value, prime);
            value /= prime;
        }
        while (value > 1) {
            while (value % prime == 0) {
                printf(" * %d", prime);
                value /= prime;
            }
            prime = prime_value(primes, ++idx, &flag);
        }
        printf("\n");
    }
    return 0;
}
```

# 1014 因子个数

时间限制 1000 ms 内存限制 32768 KB 代码长度限制 100 KB 判断程序 Standard (来自 小小)
题目描述
一个正整数可以分解成一个或多个数组的积。例如36=2*2*3*3，即包含2和3两个因子。NowCoder最近在研究因子个数的分布规律，现在给出一系列正整数，他希望你开发一个程序输出每个正整数的因子个数。

输入描述:
输入包括多组数据。
每组数据仅有一个整数n (2≤n≤100000)。


输出描述:
对应每个整数，输出其因子个数，每个结果占一行。

输入例子:
30
26
20

输出例子:
3
2
2

```
#include <iostream>

using namespace std;

// 求素数
bool is_prime(int v) {
    if (v < 2) {
        return false;
    } else {
        int i = 2;
        while (i * i <= v) {
            if (v % i++ == 0) {
                return false;
            }
        }
        return true;
    }
}

int prime_value(int primes[], int idx, int *flag) {
    while (*flag < idx) {
        int value = primes[*flag];
        while (!is_prime(++value));
        *flag += 1;
        primes[*flag] = value;
    }
    return primes[idx];
}

int main(int argc, const char * argv[]) {
    int value = 0;
    int primes[100000] = {2,3,5,7,11,13,17,19,23,29};
    int prime, flag = 9, idx = 0;
    int count;
    while (cin >> value) {
        prime = 2; idx = 0; count = 0;
        while (value > 1) {
            if (value % prime == 0) {
                count++;
                while (value % prime == 0) {
                    value /= prime;
                }
            }
            prime = prime_value(primes, ++idx, &flag);
        }
        printf("%d\n", count);
    }
    return 0;
}
```

# 1015 skew数

时间限制 1000 ms 内存限制 32768 KB 代码长度限制 100 KB 判断程序 Standard (来自 小小)
题目描述
在 skew binary 表示中，第 k 位的值 x[k] 表示 x[k]×(2^(k+1)-1)。每个位上的可能数字是 0 或 1，最后面一个非零位可以是 2，例如，10120(skew) = 1×(2^5-1) + 0×(2^4-1) + 1×(2^3-1) + 2×(2^2-1) + 0×(2^1-1) = 31 + 0 + 7 + 6 + 0 = 44。前十个 skew 数是 0、1、2、10、11、12、20、100、101、以及 102。

输入描述:
输入包括多组数据，每组数据包含一个 skew 数。


输出描述:
对应每一组数据，输出相应的十进制形式。结果不超过 2^31-1。

输入例子:
10120
200000000000000000000000000000
10
1000000000000000000000000000000
11
100
11111000001110000101101102000

输出例子:
44
2147483646
3
2147483647
4
7
1041110737

```
#include <iostream>
#include <cstring>
#include <math.h>

using namespace std;

int main(int argc, const char * argv[]) {
    char skew[33];
    unsigned long lenght, count;
    int idx;
    while (cin >> skew) {
        idx = count = 0;
        lenght = strlen(skew);
        for (int i = 0; i < lenght; i++) {
            count = count + (skew[i] - 48) * (pow(2, lenght - i) - 1);
        }
        printf("%ld\n", count);
    }
    return 0;
}
```

# 1016 一的个数

时间限制 1000 ms 内存限制 32768 KB 代码长度限制 100 KB 判断程序 Standard (来自 小小)
题目描述
NowCoder总是力争上游，凡事都要拿第一，所以他对“1”这个数情有独钟。爱屋及乌，他也很喜欢包含1的数，例如10、11、12……。不仅如此，他同样喜欢任意进制中包含1的数。当然，其中包含1的个数越多他越喜欢。你能帮他统计一下某个数在特定的进制下1的个数吗？

输入描述:
输入有多组数据，每组数据包含一个正整数n (1≤n≤2147483647)和一个正整数r (2≤r≤16)。

其中n为十进制整数，r为目标进制。


输出描述:
对应每组输入，输出整数n转换成r进制之后，其中包含多少个“1”。

输入例子:
1 2
123 16

输出例子:
1
0

```
#include <iostream>

using namespace std;

int main(int argc, const char * argv[]) {
    int value = 0, binary = 0, count;
    while (cin >> value >> binary) {
        count = 0;
        while (value >= binary) {
            if (value % binary == 1) {
                count++;
            }
            value /= binary;
        }
        if (value == 1) {
            count++;
        }
        printf("%d\n", count);
    }
    return 0;
}
```

# 1017 外星人的语言

时间限制 1000 ms 内存限制 32768 KB 代码长度限制 100 KB 判断程序 Standard (来自 小小)
题目描述
nowcoder费了很大劲，终于和地外文明联系上。我们地球人通常有10根手指，因此我们习惯用10进制的数，而外星人的手指有16跟、8根等不等的数目，因此他们使用与我们不同的进制。为了方便沟通，需要你开发一款工具，把地球人的10进制转换成外星人的R进制形式。

输入描述:
输入有多行。

每行包括两个正整数n和R，其中2≤R≤16。

输入直到文件结束为止。


输出描述:
对于每个用例，输出n对应的R进制形式。

超过10进制的数，10用A表示、11用B表示，依次类推。

输入例子:
1989 2
1119 16

输出例子:
11111000101
45F

```
#include <iostream>

using namespace std;

int main(int argc, const char * argv[]) {
    char output[] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G'};
    int result[64], value, binary, idx;
    while (cin >> value >> binary) {
        idx = -1;
        while (value > 0) {
            result[++idx] = value % binary;
            value /= binary;
        }
        for (int i = idx; i > -1; i--) {
            printf("%c", output[result[i]]);
        }
        printf("\n");
    }
    return 0;
}
```

# 1019 进制回文数
时间限制 1000 ms 内存限制 32768 KB 代码长度限制 100 KB 判断程序 Standard (来自 小小)
题目描述
如果一个数字从左边读和从右边读一样，那么这个数字就是一个回文数。例如32123就是一个回文数；17在某种意义上也是一个回文数，因为它的二进制型式——10001——是一个回文数。

请你帮忙开发一个程序，判断一个数n在任意进制（2-16）下是否有回文数。

输入描述:
输入包含多组数据。

每组数据包括一个正整数n (1≤n<2^31)。


输出描述:
对应每组数据，如果n在2-16进制下存在回文数，则输出“Yes”；否则输出“No”。

输入例子:
32123
17

输出例子:
Yes
Yes

```
#include <iostream>

using namespace std;

bool is_round(int values[], int end) {
    for (int idx_r = 0, idx_l = end; idx_r <= idx_l; idx_r++, idx_l--) {
        if (values[idx_r] != values[idx_l]) {
            return false;
        }
    }
    return true;
}

int out_bit(int *values, int value, int bit) {
    int idx = 0;
    while (value > 0) {
        values[idx++] = value % bit;
        value /= bit;
    }
    return idx - 1;
}

int main(int argc, const char * argv[]) {
    int values[32] = {0}, value = 0, end = 0;
    bool round = false;
    while (cin >> value) {
        round = false;
        for (int i = 2; i < 17; i++) {
            end = out_bit(values, value, i);
            if (is_round(values, end)) {
                round = true;
                break;
            }
        }
        if (round) {
            printf("Yes\n");
        } else {
            printf("No\n");
        }
    }
    return 0;
}
```

# 1020 发邮件
时间限制 1000 ms 内存限制 32768 KB 代码长度限制 100 KB 判断程序 Standard (来自 小小)
题目描述
NowCoder每天要给很多人发邮件。有一天他发现发错了邮件，把发给A的邮件发给了B，把发给B的邮件发给了A。于是他就思考，要给n个人发邮件，在每个人仅收到1封邮件的情况下，有多少种情况是所有人都收到了错误的邮件？

即没有人收到属于自己的邮件。

输入描述:
输入包含多组数据，每组数据包含一个正整数n（2≤n≤20）。


输出描述:
对应每一组数据，输出一个正整数，表示无人收到自己邮件的种数。

输入例子:
2
3

输出例子:
1
2

```
#include <iostream>

using namespace std;

long euler(long number) {
    if (number == 1) {
        return 0;
    } else if (number == 2) {
        return 1;
    } else {
        return (number - 1) * (euler(number - 2) + euler(number - 1));
    }
}

int main(int argc, const char * argv[]) {
    int value = 0;
    while (cin >> value) {
        printf("%ld\n", euler(value));
    }
    return 0;
}
```

# 1021 年会抽奖
时间限制 1000 ms 内存限制 32768 KB 代码长度限制 100 KB 判断程序 Standard (来自 小小)
题目描述
今年公司年会的奖品特别给力，但获奖的规矩却很奇葩：

1. 首先，所有人员都将一张写有自己名字的字条放入抽奖箱中；
2. 待所有字条加入完毕，每人从箱中取一个字条；
3. 如果抽到的字条上写的就是自己的名字，那么“恭喜你，中奖了！”

现在告诉你参加晚会的人数，请你计算有多少概率会出现无人获奖？

输入描述:
输入包含多组数据，每组数据包含一个正整数n（2≤n≤20）。


输出描述:
对应每一组数据，以“xx.xx%”的格式输出发生无人获奖的概率。

输入例子:
2

输出例子:
50.00%

```
#include <iostream>

using namespace std;

long euler(long number) {
    if (number == 1) {
        return 0;
    } else if (number == 2) {
        return 1;
    } else {
        return (number - 1) * (euler(number - 2) + euler(number - 1));
    }
}

long factorial(long number) {
    if (number <= 1) {
        return 1;
    } else {
        return number * factorial(number - 1);
    }
}

int main(int argc, const char * argv[]) {
    int value = 0;
    double result = 0;
    while (cin >> value) {
        if (value < 7) {
            result = (double)euler(value) / (double)factorial(value) * 100;
            printf("%0.2f%%\n", result);
        } else {
            printf("36.79%%\n");
        }
    }
    return 0;
}
```

# 1022 

有假币
时间限制 1000 ms 内存限制 32768 KB 代码长度限制 100 KB 判断程序 Standard (来自 小小)
题目描述
居然有假币！ 现在猪肉涨了，但是农民的工资却不见涨啊，没钱怎么买猪肉啊。nowcoder这就去买猪肉，结果找来的零钱中有假币！！！可惜nowcoder一不小心把它混进了一堆真币里面去了。只知道假币的重量比真币的质量要轻，给你一个天平（天平两端能容纳无限个硬币），请用最快的时间把那个可恶的假币找出来。

输入描述:
1≤n≤2^30,输入0结束程序。


输出描述:
最多要称几次一定能把那个假币找出来？

输入例子:
3
12
0

输出例子:
1
3

```
#include <iostream>

using namespace std;

int main(int argc, const char * argv[]) {
    int value = 0, count = 0;
    while (cin >> value && value != 0) {
        count = 0;
        while (value > 1) {
            value = value / 3 + 1 - (value % 3 ^ 3) / 3;
            count++;
        }
        cout << count << endl;
    }
}
```
